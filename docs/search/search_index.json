{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction A portable (in both senses, easily installable and easy to port), fast, and simple wrapper for the Hugging Face Hub APIs, similar to the HF Hub Python library. A PHP library for interacting with the Hugging Face Hub. Everything is done in a single file, so all you have to do is drag the file in and import it with include ! This library is designed to be portable , simple , and easily portable to another language. If you're interested in porting this library to another language, please see the Porting section below! Features We aim to support the following methods, with similar APIs as the original huggingface_hub Python library: User Management Whoami Repo Operations Create Repo HF Spaces support Delete Repo Move Repo Update Repo Visibility Repo File Management Create Download Delete List Repo Folder Management Delete Note Unfortunately, large files (Git LFS) are not supported at this time. Please use libgit2 PHP bindings or the Python library instead.","title":"Introduction"},{"location":"#introduction","text":"A portable (in both senses, easily installable and easy to port), fast, and simple wrapper for the Hugging Face Hub APIs, similar to the HF Hub Python library. A PHP library for interacting with the Hugging Face Hub. Everything is done in a single file, so all you have to do is drag the file in and import it with include ! This library is designed to be portable , simple , and easily portable to another language. If you're interested in porting this library to another language, please see the Porting section below!","title":"Introduction"},{"location":"#features","text":"We aim to support the following methods, with similar APIs as the original huggingface_hub Python library: User Management Whoami Repo Operations Create Repo HF Spaces support Delete Repo Move Repo Update Repo Visibility Repo File Management Create Download Delete List Repo Folder Management Delete Note Unfortunately, large files (Git LFS) are not supported at this time. Please use libgit2 PHP bindings or the Python library instead.","title":"Features"},{"location":"documentation/1-introduction/","text":"Introduction Almost all methods return an array.","title":"Introduction"},{"location":"documentation/1-introduction/#introduction","text":"Almost all methods return an array.","title":"Introduction"},{"location":"documentation/2-installation/","text":"Installation To install HFHubPHP, simply copy the hub.php file in the src folder onto your web server. Alternatively, you can use the CLI to install it directly: wget \"https://raw.githubusercontent.com/fakerybakery/HFHubPHP/main/src/hub.php\" Then, include the file: include 'hub.php';","title":"Installation"},{"location":"documentation/2-installation/#installation","text":"To install HFHubPHP, simply copy the hub.php file in the src folder onto your web server. Alternatively, you can use the CLI to install it directly: wget \"https://raw.githubusercontent.com/fakerybakery/HFHubPHP/main/src/hub.php\" Then, include the file: include 'hub.php';","title":"Installation"},{"location":"documentation/usage/1-introduction/","text":"Introduction HFHubPHP provides numerous methods to interact with the Hugging Face Hub . HFHubPHP has reimplemented the methods from the official Python library in PHP using cURL, all in a single, easily importable file!","title":"Introduction"},{"location":"documentation/usage/1-introduction/#introduction","text":"HFHubPHP provides numerous methods to interact with the Hugging Face Hub . HFHubPHP has reimplemented the methods from the official Python library in PHP using cURL, all in a single, easily importable file!","title":"Introduction"},{"location":"documentation/usage/2-init/","text":"Initialization To get started, first make sure you've imported the hub.php library: include 'hub.php'; Then, initialize a new HF Hub API object: $api = new Hub('<your_hf_token>'); Note Don't have a Hugging Face token yet? Get one here ! All you need is a free Hugging Face account. Make sure the token's role is set to write for all methods to work! Make sure your token begins with hf_ ! Make sure not to share your token or publish code with your token. Check your code before open-sourcing it to ensure it doesn't have any tokens.","title":"Initialization"},{"location":"documentation/usage/2-init/#initialization","text":"To get started, first make sure you've imported the hub.php library: include 'hub.php'; Then, initialize a new HF Hub API object: $api = new Hub('<your_hf_token>'); Note Don't have a Hugging Face token yet? Get one here ! All you need is a free Hugging Face account. Make sure the token's role is set to write for all methods to work! Make sure your token begins with hf_ ! Make sure not to share your token or publish code with your token. Check your code before open-sourcing it to ensure it doesn't have any tokens.","title":"Initialization"},{"location":"documentation/usage/file-operations/delete-file/","text":"Delete File Method $api->delete_file Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. path : Path in repo to delete repo_type : The repo type. Defaults to model. Can be: model dataset space commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main . Example Delete test.txt from the dataset username/repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->delete_file('username/repo', 'test.txt', 'dataset');","title":"Delete File"},{"location":"documentation/usage/file-operations/delete-file/#delete-file","text":"","title":"Delete File"},{"location":"documentation/usage/file-operations/delete-file/#method","text":"$api->delete_file","title":"Method"},{"location":"documentation/usage/file-operations/delete-file/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. path : Path in repo to delete repo_type : The repo type. Defaults to model. Can be: model dataset space commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main .","title":"Parameters"},{"location":"documentation/usage/file-operations/delete-file/#example","text":"Delete test.txt from the dataset username/repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->delete_file('username/repo', 'test.txt', 'dataset');","title":"Example"},{"location":"documentation/usage/file-operations/delete-folder/","text":"Delete File Method $api->delete_folder Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. path : Path in repo to delete repo_type : The repo type. Defaults to model. Can be: model dataset space commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main . Example Delete the test folder from the dataset username/repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->delete_folder('username/repo', 'test', 'dataset');","title":"Delete File"},{"location":"documentation/usage/file-operations/delete-folder/#delete-file","text":"","title":"Delete File"},{"location":"documentation/usage/file-operations/delete-folder/#method","text":"$api->delete_folder","title":"Method"},{"location":"documentation/usage/file-operations/delete-folder/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. path : Path in repo to delete repo_type : The repo type. Defaults to model. Can be: model dataset space commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main .","title":"Parameters"},{"location":"documentation/usage/file-operations/delete-folder/#example","text":"Delete the test folder from the dataset username/repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->delete_folder('username/repo', 'test', 'dataset');","title":"Example"},{"location":"documentation/usage/file-operations/download-file/","text":"Delete File Note This method directly streams the incoming data into the file. For large files, the data will be incrementally downloaded and saved. This means that the output file is not complete until the task finishes. Method $api->download_file Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. file : Path in repo to download path : Path in save the downloaded file to repo_type : The repo type. Defaults to model. Can be: model dataset space revision : The branch to use. Defaults to main . Example Download test.txt from the model username/repo and save it to output.txt . <?php include 'hub.php'; $api = new Hub('hf_***'); $api->download_file('username/repo', 'test.txt', 'output.txt', 'model');","title":"Delete File"},{"location":"documentation/usage/file-operations/download-file/#delete-file","text":"Note This method directly streams the incoming data into the file. For large files, the data will be incrementally downloaded and saved. This means that the output file is not complete until the task finishes.","title":"Delete File"},{"location":"documentation/usage/file-operations/download-file/#method","text":"$api->download_file","title":"Method"},{"location":"documentation/usage/file-operations/download-file/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. file : Path in repo to download path : Path in save the downloaded file to repo_type : The repo type. Defaults to model. Can be: model dataset space revision : The branch to use. Defaults to main .","title":"Parameters"},{"location":"documentation/usage/file-operations/download-file/#example","text":"Download test.txt from the model username/repo and save it to output.txt . <?php include 'hub.php'; $api = new Hub('hf_***'); $api->download_file('username/repo', 'test.txt', 'output.txt', 'model');","title":"Example"},{"location":"documentation/usage/file-operations/list-files/","text":"List Files Method $api->list_files Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space repo_path : Path in repo to list. Defaults to an empty string, which lists the root directory. revision : The branch to use. Defaults to main . Response array [ array [ \"type\" => string \"file|folder\", \"oid\" => string, \"size\" => int, \"path\" => string ] ] Example Pretty-print all files in the root directory of a the username/repo model. <?php include 'hub.php'; $api = new Hub('hf_***'); $files = ($api->list_files('username/repo')); foreach ($files as $file) { echo $file['type'] . ': ' . $file['path'] . ' (' . $file['size'] . ')' . \"\\n\"; }","title":"List Files"},{"location":"documentation/usage/file-operations/list-files/#list-files","text":"","title":"List Files"},{"location":"documentation/usage/file-operations/list-files/#method","text":"$api->list_files","title":"Method"},{"location":"documentation/usage/file-operations/list-files/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space repo_path : Path in repo to list. Defaults to an empty string, which lists the root directory. revision : The branch to use. Defaults to main .","title":"Parameters"},{"location":"documentation/usage/file-operations/list-files/#response","text":"array [ array [ \"type\" => string \"file|folder\", \"oid\" => string, \"size\" => int, \"path\" => string ] ]","title":"Response"},{"location":"documentation/usage/file-operations/list-files/#example","text":"Pretty-print all files in the root directory of a the username/repo model. <?php include 'hub.php'; $api = new Hub('hf_***'); $files = ($api->list_files('username/repo')); foreach ($files as $file) { echo $file['type'] . ': ' . $file['path'] . ' (' . $file['size'] . ')' . \"\\n\"; }","title":"Example"},{"location":"documentation/usage/file-operations/upload-file/","text":"Upload File Warning HFHubPHP currently does not support large files. Git LFS has not been implemented yet. Method $api->upload_file Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. path : Path in repo to save uploaded file to file : Path on disk to upload repo_type : The repo type. Defaults to model. Can be: model dataset space commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main . Example Upload test.txt from disk and save it as hello.txt in the username/model model. <?php include 'hub.php'; $api = new Hub('hf_***'); $api->upload_file('username/repo', 'hello.txt', 'test.txt');","title":"Upload File"},{"location":"documentation/usage/file-operations/upload-file/#upload-file","text":"Warning HFHubPHP currently does not support large files. Git LFS has not been implemented yet.","title":"Upload File"},{"location":"documentation/usage/file-operations/upload-file/#method","text":"$api->upload_file","title":"Method"},{"location":"documentation/usage/file-operations/upload-file/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. path : Path in repo to save uploaded file to file : Path on disk to upload repo_type : The repo type. Defaults to model. Can be: model dataset space commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main .","title":"Parameters"},{"location":"documentation/usage/file-operations/upload-file/#example","text":"Upload test.txt from disk and save it as hello.txt in the username/model model. <?php include 'hub.php'; $api = new Hub('hf_***'); $api->upload_file('username/repo', 'hello.txt', 'test.txt');","title":"Example"},{"location":"documentation/usage/file-operations/upload-string/","text":"Upload String This method is similar to upload_file , however you can upload a string. Warning HFHubPHP currently does not support large files. Git LFS has not been implemented yet. Method $api->upload_string Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space path : Path in repo to save uploaded file to string : String to upload commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main . Example Upload a file containing Hello World and save it as hello.txt in the username/model model. <?php include 'hub.php'; $api = new Hub('hf_***'); $api->upload_file('username/repo', 'Hello World', 'hello.txt', 'test.txt');","title":"Upload String"},{"location":"documentation/usage/file-operations/upload-string/#upload-string","text":"This method is similar to upload_file , however you can upload a string. Warning HFHubPHP currently does not support large files. Git LFS has not been implemented yet.","title":"Upload String"},{"location":"documentation/usage/file-operations/upload-string/#method","text":"$api->upload_string","title":"Method"},{"location":"documentation/usage/file-operations/upload-string/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space path : Path in repo to save uploaded file to string : String to upload commit_message : Commit message. Default: Delete File commit_description : Extra description for commit message. Defaults to null revision : The branch to use. Defaults to main .","title":"Parameters"},{"location":"documentation/usage/file-operations/upload-string/#example","text":"Upload a file containing Hello World and save it as hello.txt in the username/model model. <?php include 'hub.php'; $api = new Hub('hf_***'); $api->upload_file('username/repo', 'Hello World', 'hello.txt', 'test.txt');","title":"Example"},{"location":"documentation/usage/other/inference/","text":"Inference API Method $api->generate Parameters model_id : Model ID on the HF Hub inputs : Input text min_length : Minimum number of tokens to generate (default 0) max_length : Maximum number of tokens to generate (default 256) top_k : Top K (default null) top_p : Top P (default null) temperature : Temperature (default 1.0) repetition_penalty : Repetition penalty (default null) max_time : Maximum generation time (default 120 seconds, can range from 1s to 120s) do_sample : Sample (default null) use_cache : Cache responses (default null) wait_for_model : Wait for model to load before generating, instead of erroring if model isn't loaded (default True) Example Complete the text \"Hello:\" include 'hub.php'; $api = new Hub('hf_***'); echo($api->generate('gpt2', 'Hello')['generated_text']);","title":"Inference API"},{"location":"documentation/usage/other/inference/#inference-api","text":"","title":"Inference API"},{"location":"documentation/usage/other/inference/#method","text":"$api->generate","title":"Method"},{"location":"documentation/usage/other/inference/#parameters","text":"model_id : Model ID on the HF Hub inputs : Input text min_length : Minimum number of tokens to generate (default 0) max_length : Maximum number of tokens to generate (default 256) top_k : Top K (default null) top_p : Top P (default null) temperature : Temperature (default 1.0) repetition_penalty : Repetition penalty (default null) max_time : Maximum generation time (default 120 seconds, can range from 1s to 120s) do_sample : Sample (default null) use_cache : Cache responses (default null) wait_for_model : Wait for model to load before generating, instead of erroring if model isn't loaded (default True)","title":"Parameters"},{"location":"documentation/usage/other/inference/#example","text":"Complete the text \"Hello:\" include 'hub.php'; $api = new Hub('hf_***'); echo($api->generate('gpt2', 'Hello')['generated_text']);","title":"Example"},{"location":"documentation/usage/other/whoami/","text":"Whoami Method $api->whoami Parameters None Response array [ \"type\" => string, \"id\" => string, \"name\" => string, # username \"fullname\" => string, # display name \"email\" => string, \"emailVerified\" => bool, \"canPay\" => bool, \"isPro\" => bool, \"periodEnd\" => int, \"avatarUrl\" => string, \"orgs\" => array [ array [ \"type\" => string \"org\", \"id\" => string, \"name\" => string, # username \"fullname\" => string, # display name \"email\" => string, \"emailVerified\" => bool, \"canPay\" => bool, \"isPro\" => bool, \"periodEnd\" => int, \"avatarUrl\" => string, \"roleInOrg\" => string, \"isEnterprise\" => bool ] ] ] Example Print your email address: <?php include 'hub.php'; $api = new Hub('hf_***'); echo $api->whoami()['email'];","title":"Whoami"},{"location":"documentation/usage/other/whoami/#whoami","text":"","title":"Whoami"},{"location":"documentation/usage/other/whoami/#method","text":"$api->whoami","title":"Method"},{"location":"documentation/usage/other/whoami/#parameters","text":"None","title":"Parameters"},{"location":"documentation/usage/other/whoami/#response","text":"array [ \"type\" => string, \"id\" => string, \"name\" => string, # username \"fullname\" => string, # display name \"email\" => string, \"emailVerified\" => bool, \"canPay\" => bool, \"isPro\" => bool, \"periodEnd\" => int, \"avatarUrl\" => string, \"orgs\" => array [ array [ \"type\" => string \"org\", \"id\" => string, \"name\" => string, # username \"fullname\" => string, # display name \"email\" => string, \"emailVerified\" => bool, \"canPay\" => bool, \"isPro\" => bool, \"periodEnd\" => int, \"avatarUrl\" => string, \"roleInOrg\" => string, \"isEnterprise\" => bool ] ] ]","title":"Response"},{"location":"documentation/usage/other/whoami/#example","text":"Print your email address: <?php include 'hub.php'; $api = new Hub('hf_***'); echo $api->whoami()['email'];","title":"Example"},{"location":"documentation/usage/repo-operations/create/","text":"Create Repository Method $api->create_repo Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space private : Option to make the repo private. Defaults to False. space_sdk: This option only applies if the repo_type is space. SDK of the Space. Can be: gradio streamlit docker static space_hardware: This option only applies if the repo_type is space. Hardware of the Space. Can be: cpu-basic cpu-upgrade t4-small t4-medium zero-a10g (waitlist) a10g-small a10g-large a10g-largex2 a10g-largex4 a100-large space_hardware: This option only applies if the repo_type is space. Persistent storage of the Space. Can be: small (20 GB) medium (150 GB) large (1 TB) space_sleep_time: This option only applies if the repo_type is space. Sleep time in seconds of space. space_secrets: This option only applies if the repo_type is space. KV array for Space secrets. space_variables: This option only applies if the repo_type is space. KV array for Space variables. Example Create a private model under username named repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->create_repo('username/repo', 'model', true);","title":"Create Repository"},{"location":"documentation/usage/repo-operations/create/#create-repository","text":"","title":"Create Repository"},{"location":"documentation/usage/repo-operations/create/#method","text":"$api->create_repo","title":"Method"},{"location":"documentation/usage/repo-operations/create/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space private : Option to make the repo private. Defaults to False. space_sdk: This option only applies if the repo_type is space. SDK of the Space. Can be: gradio streamlit docker static space_hardware: This option only applies if the repo_type is space. Hardware of the Space. Can be: cpu-basic cpu-upgrade t4-small t4-medium zero-a10g (waitlist) a10g-small a10g-large a10g-largex2 a10g-largex4 a100-large space_hardware: This option only applies if the repo_type is space. Persistent storage of the Space. Can be: small (20 GB) medium (150 GB) large (1 TB) space_sleep_time: This option only applies if the repo_type is space. Sleep time in seconds of space. space_secrets: This option only applies if the repo_type is space. KV array for Space secrets. space_variables: This option only applies if the repo_type is space. KV array for Space variables.","title":"Parameters"},{"location":"documentation/usage/repo-operations/create/#example","text":"Create a private model under username named repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->create_repo('username/repo', 'model', true);","title":"Example"},{"location":"documentation/usage/repo-operations/delete/","text":"Delete Repository Method $api->delete_repo Parameters repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space Example Delete a repository under username named repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->delete_repo('username/repo', 'model');","title":"Delete Repository"},{"location":"documentation/usage/repo-operations/delete/#delete-repository","text":"","title":"Delete Repository"},{"location":"documentation/usage/repo-operations/delete/#method","text":"$api->delete_repo","title":"Method"},{"location":"documentation/usage/repo-operations/delete/#parameters","text":"repo_id : The ID of the repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space","title":"Parameters"},{"location":"documentation/usage/repo-operations/delete/#example","text":"Delete a repository under username named repo : <?php include 'hub.php'; $api = new Hub('hf_***'); $api->delete_repo('username/repo', 'model');","title":"Example"},{"location":"documentation/usage/repo-operations/move/","text":"Move Repository Method $api->move_repo Parameters from_id : The ID of the original repository on the Hugging Face Hub. Usually in the form of username/repository_name. to_id : The ID of the new repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space Example Move a repository under username named repo and rename it to repo1 <?php include 'hub.php'; $api = new Hub('hf_***'); $api->move_repo('username/repo', 'username/repo1', 'model');","title":"Move Repository"},{"location":"documentation/usage/repo-operations/move/#move-repository","text":"","title":"Move Repository"},{"location":"documentation/usage/repo-operations/move/#method","text":"$api->move_repo","title":"Method"},{"location":"documentation/usage/repo-operations/move/#parameters","text":"from_id : The ID of the original repository on the Hugging Face Hub. Usually in the form of username/repository_name. to_id : The ID of the new repository on the Hugging Face Hub. Usually in the form of username/repository_name. repo_type : The repo type. Defaults to model. Can be: model dataset space","title":"Parameters"},{"location":"documentation/usage/repo-operations/move/#example","text":"Move a repository under username named repo and rename it to repo1 <?php include 'hub.php'; $api = new Hub('hf_***'); $api->move_repo('username/repo', 'username/repo1', 'model');","title":"Example"},{"location":"documentation/usage/repo-operations/update-visibility/","text":"Update Repo Visibility Method $api->update_repo_visibility Parameters repo_id : The ID of the original repository on the Hugging Face Hub. Usually in the form of username/repository_name. private : Boolean - true makes the repo private and false makes it public. repo_type : The repo type. Defaults to model. Can be: model dataset space Example Make username/repo private. <?php include 'hub.php'; $api = new Hub('hf_***'); $api->update_repo_visibility('username/repo', True);","title":"Update Repo Visibility"},{"location":"documentation/usage/repo-operations/update-visibility/#update-repo-visibility","text":"","title":"Update Repo Visibility"},{"location":"documentation/usage/repo-operations/update-visibility/#method","text":"$api->update_repo_visibility","title":"Method"},{"location":"documentation/usage/repo-operations/update-visibility/#parameters","text":"repo_id : The ID of the original repository on the Hugging Face Hub. Usually in the form of username/repository_name. private : Boolean - true makes the repo private and false makes it public. repo_type : The repo type. Defaults to model. Can be: model dataset space","title":"Parameters"},{"location":"documentation/usage/repo-operations/update-visibility/#example","text":"Make username/repo private. <?php include 'hub.php'; $api = new Hub('hf_***'); $api->update_repo_visibility('username/repo', True);","title":"Example"}]}